apply plugin: 'com.android.application'

dependencies {
    compile fileTree(include: '*.jar', dir: 'libs')
}

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.1"
    
    defaultConfig {
        minSdkVersion 11
        targetSdkVersion 21
        versionCode 23
        versionName "2.2.0"
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs'] 
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
    
    
    //签名
    signingConfigs {

    }
    
    buildTypes {
        release {
            minifyEnabled true
     		proguardFile 'proguard-project.txt'
        }
    }
    
    //渠道Flavors，我这里写了一些常用的，你们自己改
    productFlavors {

    }
    
    /*android.applicationVariants.all { variant ->
	    def file = variant.outputFile  
	    variant.outputFile = new File(file.parent, file.name.replace(".apk", "-" + defaultConfig.versionName + ".apk"))  
	}*/

    /*applicationVariants.all { variant ->
        variant.outputs.each  { output ->
            output.outputFile = new File(output.outputFile.parent, output.outputFile.name.replace(".apk", "-" + defaultConfig.versionName + ".apk"))
        }
    }*/

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def file = output.outputFile
            output.outputFile = new File(file.parent, file.name.replace(".apk", "-" + defaultConfig.versionName + ".apk"))
        }
    }
    
	lintOptions {
    	abortOnError false
	}


}
